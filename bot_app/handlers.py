import time
import os

from django.db.models.functions import Random
import telebot
from telebot import types

from keyboards import (
    first_keyboard,
    create_first_set_inline,
    order_keyboard,
    markup_keyboard
)

user_states = {}
user_info = {}

from shop.models import Bouquet

FLORIST_CHAT_ID = os.getenv('FLORIST_CHAT_ID')
COURIER_CHAT_ID = os.getenv('COURIER_CHAT_ID')


def handle_start(bot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_id = message.from_user.id
        chat_id = message.chat.id

        user_states.pop(user_id, None)
        user_info.pop(user_id, None)

        bot.send_message(
            chat_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        bot.send_message(
            chat_id,
            "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π.",
            reply_markup=first_keyboard()
        )


def handle_messages(bot, provider_token):
    @bot.message_handler(func=lambda message: True)
    def handler_message(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        current_state = user_states.get(user_id, None)

        if current_state == 'awaiting_custom_occasion':
            user_info[user_id] = {}
            user_info[user_id]['custom_occasion'] = message.text or '–ë–µ–∑ –ø–æ–≤–æ–¥–∞'
            user_info[user_id]['occasion'] = '–ë–µ–∑ –ø–æ–≤–æ–¥–∞'
            user_states[user_id] = 'awaiting_price_selection'

            bot.send_message(
                chat_id,
                "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
                reply_markup=create_first_set_inline()
            )
            return

        if current_state == 'awaiting_phone_consult':
            phone_number = message.text
            user_info.setdefault(user_id, {})['phone_consult'] = phone_number

            bot.send_message(
                chat_id,
                "–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:"
            )
            bot.send_message(
                chat_id,
                '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                reply_markup=create_first_set_inline()
            )

            if FLORIST_CHAT_ID:
                try:
                    florist_chat_id = int(FLORIST_CHAT_ID)
                    customer_username = message.from_user.username
                    customer_contact_info = f"@{customer_username}" if customer_username else f"User ID: {user_id}"
                    bot.send_message(
                        florist_chat_id,
                        f"üìû *–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!*\n\n"
                        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {customer_contact_info}\n"
                        f"‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_number}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.",
                        parse_mode='Markdown'
                    )
                except ValueError:
                    print("–û—à–∏–±–∫–∞: FLORIST_CHAT_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

            user_states.pop(user_id, None)
            return

        elif current_state == 'awaiting_name':
            user_info[user_id]['name'] = message.text
            user_states[user_id] = 'awaiting_address'
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return

        elif current_state == 'awaiting_address':
            user_info[user_id]['address'] = message.text
            user_states[user_id] = 'awaiting_date'
            bot.send_message(chat_id, "–ü–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025):")
            return

        elif current_state == 'awaiting_date':
            user_info[user_id]['date'] = message.text
            user_states[user_id] = 'awaiting_time'
            bot.send_message(chat_id, "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-16:00):")
            return

        elif current_state == 'awaiting_time':
            user_info[user_id]['time'] = message.text

            price = user_info[user_id].get('price')
            bouquet_id = user_info[user_id].get('bouquet_id')

            if not price or not bouquet_id:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –∏–ª–∏ –±—É–∫–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
                user_states.pop(user_id, None)
                user_info.pop(user_id, None)
                return

            if not provider_token:
                bot.send_message(chat_id, "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã.")
                user_states.pop(user_id, None)
                return

            order_id = int(time.time())
            user_info[user_id]['order_id'] = order_id
            payload = f"order_{user_id}_{price}_{order_id}"
            user_info[user_id]['payload'] = payload

            try:
                bouquet_obj = Bouquet.objects.get(id=bouquet_id)
                invoice_title = f"–û–ø–ª–∞—Ç–∞ –±—É–∫–µ—Ç–∞: {bouquet_obj.title}"
                invoice_desc = f"–ó–∞–∫–∞–∑ #{order_id} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ @{bot.get_me().username}"
            except Bouquet.DoesNotExist:
                invoice_title = "–û–ø–ª–∞—Ç–∞ –±—É–∫–µ—Ç–∞"
                invoice_desc = f"–ó–∞–∫–∞–∑ #{order_id} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ @{bot.get_me().username}"

            try:
                amount_in_kop = int(price) * 100
                bot.send_invoice(
                    chat_id=chat_id,
                    title=invoice_title,
                    description=invoice_desc,
                    invoice_payload=payload,
                    provider_token=provider_token,
                    currency='RUB',
                    prices=[types.LabeledPrice(label="–ë—É–∫–µ—Ç", amount=amount_in_kop)]
                )
                bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ send_invoice: {e}")
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            user_states.pop(user_id, None)
            return

        if message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(
                chat_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=first_keyboard()
            )

        elif message.text in ("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–í —à–∫–æ–ª—É", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞"):
            user_info[user_id] = {'occasion': message.text}
            user_states[user_id] = 'awaiting_price_selection'
            bot.send_message(
                chat_id,
                '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                reply_markup=create_first_set_inline()
            )

        elif message.text == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥":
            user_states[user_id] = 'awaiting_custom_occasion'
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤–æ–¥:")

        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start.")


def handle_callbacks(bot):
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        if call.data.startswith('~'):
            price_str = call.data.replace('~', '')
            user_info.setdefault(user_id, {})
            user_info[user_id]['price'] = price_str

            occasion = user_info[user_id].get('occasion', '')

            qs = Bouquet.objects.filter(is_active=True)
            if occasion:
                qs = qs.filter(occasion__iexact=occasion)

            try:
                if price_str.isdigit():
                    price_value = int(price_str)
                    qs = qs.filter(price__lte=price_value).order_by('-price')
                    bouquet = qs.first()
                elif price_str == '–ë–æ–ª—å—à–µ':
                    qs = qs.filter(price__gt=2000).order_by('price')
                    bouquet = qs.first()
                elif price_str == '–ù–µ –≤–∞–∂–Ω–æ':
                    bouquet = qs.order_by(Random()).first()
                else:
                    bouquet = None

                if bouquet:
                    user_info[user_id]['bouquet_id'] = bouquet.id
                    with open(bouquet.photo.path, 'rb') as photo:
                        caption = f"{bouquet.description}\n\n–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
                        bot.send_photo(chat_id, photo, caption=caption, reply_markup=order_keyboard(bouquet.price))

                    additional_text = (
                        "<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?</b>\n"
                        "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞."
                    )
                    bot.send_message(chat_id, additional_text, parse_mode='HTML', reply_markup=markup_keyboard())
                else:
                    bot.answer_callback_query(
                        call.id,
                        "–ë—É–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏.",
                        show_alert=True
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–µ—Ç–∞: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–µ—Ç–∞.", show_alert=True)

        elif call.data.startswith('order_'):
            parts = call.data.split('_')
            if len(parts) == 2:
                price_value = parts[1]
                user_info[user_id]['price'] = price_value

            user_states[user_id] = 'awaiting_name'
            bot.send_message(chat_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
            bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")

        elif call.data == 'consult':
            user_states[user_id] = 'awaiting_phone_consult'
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.")
            bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        elif call.data == 'more_flowers':
            last_id = user_info.get(user_id, {}).get('bouquet_id')
            last_price_str = user_info.get(user_id, {}).get('price')
            occasion = user_info[user_id].get('occasion', '')

            if not last_id or not last_price_str:
                bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –±—É–∫–µ—Ç", show_alert=True)
                return

            try:
                last_bouquet = Bouquet.objects.get(id=last_id, is_active=True)
            except Bouquet.DoesNotExist:
                bot.answer_callback_query(call.id, "–¢–µ–∫—É—â–∏–π –±—É–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            try:
                p_last = int(last_price_str) if last_price_str.isdigit() else last_bouquet.price
            except ValueError:
                p_last = last_bouquet.price

            p_min = max(0, p_last - 200)
            p_max = p_last + 200

            qs = Bouquet.objects.filter(is_active=True)
            if occasion:
                qs = qs.filter(occasion__iexact=occasion)

            qs = qs.filter(price__gte=p_min, price__lte=p_max).exclude(id=last_bouquet.id)
            new_bouquet = qs.order_by(Random()).first()
            if not new_bouquet:
                bot.answer_callback_query(
                    call.id,
                    "–í –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±200 —Ä—É–± –±–æ–ª—å—à–µ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                    show_alert=True
                )
                return

            user_info[user_id]['bouquet_id'] = new_bouquet.id
            user_info[user_id]['price'] = str(new_bouquet.price)

            try:
                with open(new_bouquet.photo.path, 'rb') as photo:
                    caption = f"{new_bouquet.description}\n\n–¶–µ–Ω–∞: {new_bouquet.price} —Ä—É–±."
                    bot.send_photo(chat_id, photo, caption=caption, reply_markup=order_keyboard(new_bouquet.price))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ {e}")
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞.")

            additional_text = (
                "<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?</b>\n"
                "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞."
            )
            bot.send_message(chat_id, additional_text, parse_mode='HTML', reply_markup=markup_keyboard())
            bot.answer_callback_query(call.id)


def handle_pre_checkout(bot):
    @bot.pre_checkout_query_handler(func=lambda query: True)
    def pre_checkout_query_callback(pre_checkout_query):
        try:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ PreCheckoutQuery {pre_checkout_query.id}: {e}")
            try:
                bot.answer_pre_checkout_query(
                    pre_checkout_query.id,
                    ok=False,
                    error_message="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ."
                )
            except Exception as final_e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–∫–∞–∑–æ–º –Ω–∞ PreCheckoutQuery: {final_e}")


def handle_successful_payment(bot):
    @bot.message_handler(content_types=['successful_payment'])
    def successful_payment_callback(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        payment_info = message.successful_payment
        amount = payment_info.total_amount / 100
        currency = payment_info.currency
        payload = payment_info.invoice_payload

        info = user_info.get(user_id, {})
        stored_payload = info.get('payload')
        order_id = info.get('order_id')

        if stored_payload == payload and order_id:
            name = info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            address = info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            date_val = info.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            time_val = info.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            bouquet_id = info.get('bouquet_id')
            bouquet_price = info.get('price', 0)

            confirmation_text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} {currency} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                f"–ó–∞–∫–∞–∑ #{order_id} —Ç–µ–ø–µ—Ä—å –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ! üéâ\n\n"
                f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {name}\n"
                f"–ê–¥—Ä–µ—Å: {address}\n"
                f"–î–∞—Ç–∞: {date_val} | –í—Ä–µ–º—è: {time_val}\n"
                f"–°—É–º–º–∞: {bouquet_price} —Ä—É–±.\n"
            )
            bot.send_message(chat_id, confirmation_text)

            if COURIER_CHAT_ID:
                try:
                    courier_chat_id = int(COURIER_CHAT_ID)
                    courier_text = (
                        f"‚ÄºÔ∏è *–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id}!* \n\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} {currency}\n"
                        f"üíê *–¶–µ–Ω–∞ –±—É–∫–µ—Ç–∞:* {bouquet_price} —Ä—É–±.\n"
                        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {name}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {date_val}\n"
                        f"‚è∞ *–í—Ä–µ–º—è:* {time_val}\n"
                    )
                    bot.send_message(courier_chat_id, courier_text, parse_mode='Markdown')
                except ValueError:
                    print("–û—à–∏–±–∫–∞: COURIER_CHAT_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        user_info.pop(user_id, None)
        bot.send_message(
            chat_id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –Ω–∞ {amount} {currency}."
        )
