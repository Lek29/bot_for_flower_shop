import time

import telebot
from telebot import types

from keyboards import (
    first_keyboard,
    create_first_set_inline,
    order_keyboard,
    markup_keyboard
)

user_states = {}
user_info = {}

from shop.models import Order, Bouquet, User


def handle_start(bot: telebot.TeleBot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        username = message.from_user.username or f'tg_user_{user_id}'
        full_name = message.from_user.full_name or username

        user_obj, created = User.objects.get_or_create(
            username=username,
            defaults={
                'full_name': full_name,
                'phone': '',
                'role': None,
                'chat_id': chat_id,
                'is_active': True
            }
        )
        if not created and user_obj.chat_id != chat_id:
            user_obj.chat_id = chat_id
            user_obj.save()

        user_states.pop(user_id, None)
        user_info.pop(user_id, None)

        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(chat_id,
                         "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π.",
                         reply_markup=first_keyboard())


def handle_messages(bot: telebot.TeleBot, provider_token: str):
    @bot.message_handler(func=lambda message: True)
    def handler_message(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        current_state = user_states.get(user_id, None)

        if current_state == 'awaiting_phone_consult':
            phone_number = message.text
            user_info.setdefault(user_id, {})['phone_consult'] = phone_number

            bot.send_message(chat_id,
                             "–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
            bot.send_message(chat_id,
                             '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                             reply_markup=create_first_set_inline())

            florists = User.objects.filter(role='florist', is_active=True, chat_id__isnull=False)
            customer_username = message.from_user.username
            customer_contact_info = f"@{customer_username}" if customer_username else f"User ID: {user_id}"
            for florist in florists:
                bot.send_message(
                    florist.chat_id,
                    f"üìû *–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!*\n\n"
                    f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {customer_contact_info}\n"
                    f"‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_number}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.",
                    parse_mode='Markdown'
                )

            user_states.pop(user_id, None)
            return

        elif current_state == 'awaiting_name':
            user_info[user_id]['name'] = message.text
            user_states[user_id] = 'awaiting_address'
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return

        elif current_state == 'awaiting_address':
            user_info[user_id]['address'] = message.text
            user_states[user_id] = 'awaiting_date'
            bot.send_message(chat_id, "–ü–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023):")
            return

        elif current_state == 'awaiting_date':
            user_info[user_id]['date'] = message.text
            user_states[user_id] = 'awaiting_time'
            bot.send_message(chat_id, "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-16:00):")
            return

        elif current_state == 'awaiting_time':
            user_info[user_id]['time'] = message.text

            price = user_info[user_id].get('price')
            if not price:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
                user_states.pop(user_id, None)
                user_info.pop(user_id, None)
                return

            try:
                rub_str = price.replace('~', '')
                rub_int = int(rub_str)
            except ValueError:
                rub_int = 0

            guest_user, _ = User.objects.get_or_create(
                username=f"tg_{user_id}",
                defaults={
                    "full_name": message.from_user.first_name or "Telegram User",
                    "phone": "",
                    "role": None,
                    "is_active": True
                }
            )

            bouquet_qs = Bouquet.objects.filter(is_active=True)
            bouquet_obj = bouquet_qs.first() if bouquet_qs.exists() else None

            order_obj = Order.objects.create(
                user=guest_user,
                bouquet=bouquet_obj,
                customer_name=user_info[user_id]['name'],
                phone="",
                address=user_info[user_id]['address'],
                delivery_datetime="2025-12-25 14:00:00",
                status='new',
                total_price=rub_int,
                florist=None,
                courier=None
            )

            user_info[user_id]['order_id'] = order_obj.id

            payload = f"order_{user_id}_{price}_{int(time.time())}"
            user_info[user_id]['payload'] = payload

            if not provider_token:
                bot.send_message(chat_id, "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å—Ç–∞—Ç—É—Å: new.")
                user_states.pop(user_id, None)
                return

            amount_kopecks = rub_int * 100
            invoice_title = f"–û–ø–ª–∞—Ç–∞ –±—É–∫–µ—Ç–∞ (~{rub_int} —Ä—É–±.)"
            invoice_desc = f"–ó–∞–∫–∞–∑ #{order_obj.id} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {bot.get_me().username}"
            prices = [types.LabeledPrice(label=f"–ë—É–∫–µ—Ç {rub_int} —Ä—É–±.", amount=amount_kopecks)]

            try:
                bot.send_invoice(
                    chat_id=chat_id,
                    title=invoice_title,
                    description=invoice_desc,
                    invoice_payload=payload,
                    provider_token=provider_token,
                    currency='RUB',
                    prices=prices
                )
                bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ send_invoice: {e}")
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                order_obj.delete()

            user_states.pop(user_id, None)
            return

        if message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=first_keyboard())
        elif message.text in ("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–í —à–∫–æ–ª—É", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"):
            bot.send_message(chat_id, '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                             reply_markup=create_first_set_inline())
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start.")


def handle_callbacks(bot: telebot.TeleBot, provider_token: str):
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call: types.CallbackQuery):
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        if call.data.startswith('~'):
            price_str = call.data
            user_info.setdefault(user_id, {})['price'] = price_str

            try:
                target_price = int(price_str.replace('~', ''))
            except ValueError:
                target_price = None

            bouquet = None
            if target_price:
                bouquet = Bouquet.objects.filter(
                    is_active=True,
                    price__lte=target_price
                ).order_by('-price').first()

            if not bouquet:
                bouquet = Bouquet.objects.filter(is_active=True).order_by('price').first()

            if not bouquet or not bouquet.photo:
                bot.answer_callback_query(call.id, "–ü–æ–¥—Ö–æ–¥—è—â–∏–π –±—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üò•", show_alert=True)
                return

            from django.conf import settings
            photo_path = bouquet.photo.path

            caption = (
                f"{bouquet.title}\n\n"
                f"{bouquet.description}\n"
                f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
            )

            try:
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=caption, reply_markup=order_keyboard(price_str))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            additional_text = (
                "<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?</b>\n"
                "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞."
            )
            bot.send_message(chat_id, additional_text, parse_mode='HTML', reply_markup=markup_keyboard())
            bot.answer_callback_query(call.id)

        elif call.data.startswith('order_'):
            price = call.data.split('_')[1]
            user_info[user_id] = {'price': price}
            user_states[user_id] = 'awaiting_name'
            bot.send_message(chat_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
            bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")

        elif call.data == 'consult':
            user_states[user_id] = 'awaiting_phone_consult'
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.")
            bot.answer_callback_query(call.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        elif call.data == 'more_flowers':
            bot.answer_callback_query(call.id, "–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", show_alert=True)
            bot.send_message(chat_id, "–ü–æ–∫–∞ –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


def handle_pre_checkout(bot: telebot.TeleBot):
    @bot.pre_checkout_query_handler(func=lambda query: True)
    def pre_checkout_query_callback(pre_checkout_query: types.PreCheckoutQuery):
        try:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ PreCheckoutQuery {pre_checkout_query.id}: {e}")
            try:
                bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                              error_message="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.")
            except Exception as final_e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–∫–∞–∑–æ–º –Ω–∞ PreCheckoutQuery: {final_e}")


def handle_successful_payment(bot: telebot.TeleBot, user_info: dict):
    @bot.message_handler(content_types=['successful_payment'])
    def successful_payment_callback(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        payment_info = message.successful_payment
        amount = payment_info.total_amount / 100
        currency = payment_info.currency
        payload = payment_info.invoice_payload

        info = user_info.get(user_id, {})
        stored_payload = info.get('payload')
        order_id = info.get('order_id')

        if stored_payload == payload and order_id:
            try:
                order_obj = Order.objects.get(id=order_id)
                order_obj.status = 'paid'
                order_obj.save()

                name = order_obj.customer_name
                address = order_obj.address
                total_price = order_obj.total_price

                confirmation_text = (
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} {currency} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    f"–ó–∞–∫–∞–∑ #{order_id} —Ç–µ–ø–µ—Ä—å –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ! üéâ\n"
                    f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {name}\n"
                    f"–ê–¥—Ä–µ—Å: {address}\n"
                )
                bot.send_message(chat_id, confirmation_text)

                couriers = User.objects.filter(role='courier', is_active=True, chat_id__isnull=False)
                for courier in couriers:
                    courier_text = (
                        f"‚ÄºÔ∏è *–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id}!* \n\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} {currency}\n"
                        f"üíê *–ë—É–∫–µ—Ç:* {total_price} —Ä—É–±.\n"
                        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {name}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
                    )
                    bot.send_message(courier.chat_id, courier_text, parse_mode='Markdown')

            except Order.DoesNotExist:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        user_info.pop(user_id, None)

        bot.send_message(
            chat_id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –Ω–∞ {amount} {currency}."
        )
